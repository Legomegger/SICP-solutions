#lang sicp
(define (make-segment start-segment end-segment)
  (cons start-segment end-segment))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (make-point x-point y-point)
  (cons x-point y-point))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))
(define (midpoint-segment segment)
  (let ((st-s (start-segment segment))
        (en-s (end-segment segment)))
    (let ((x-point-first-seg (x-point st-s))
        (y-point-first-seg (y-point st-s))
        (x-point-second-seg (x-point en-s))
        (y-point-second-seg (y-point en-s)))
    (make-point (/ ( + x-point-first-seg x-point-second-seg) 2)
                (/ ( + y-point-first-seg y-point-second-seg) 2)))))
;;test
(define first-point (make-point 2 6))
(define second-point (make-point 4 8))
(define segment (make-segment first-point second-point))
(midpoint-segment segment)