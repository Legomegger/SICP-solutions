#lang sicp
(define (make-segment start-segment end-segment)
  (cons start-segment end-segment))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (make-point x-point y-point)
  (cons x-point y-point))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))
(define (midpoint-segment segment)
  (let ((st-s (start-segment segment))
        (en-s (end-segment segment)))
    (let ((x-point-first-seg (x-point st-s))
        (y-point-first-seg (y-point st-s))
        (x-point-second-seg (x-point en-s))
        (y-point-second-seg (y-point en-s)))
    (make-point (/ ( + x-point-first-seg x-point-second-seg) 2)
                (/ ( + y-point-first-seg y-point-second-seg) 2)))))

(define (make-rect origin width height)
  (cons origin (cons width height)))
(define (origin rect)
  (car rect))
(define (width rect)
  (car (cdr rect)))
(define (height rect)
  (cdr (cdr rect)))
(define (area rect)
  (let ((w (width rect))
        (h (height rect))
        (o (origin rect)))
    (let ((w-len (abs (- (x-point o) (x-point (end-segment w)))))
          (h-len (abs (- (y-point o) (y-point (end-segment h))))))
      (* w-len h-len))))
(define (perimeter rect)
  (let ((w (width rect))
        (h (height rect))
        (o (origin rect)))
    (let ((w-len (abs (- (x-point o) (x-point (end-segment w)))))
          (h-len (abs (- (y-point o) (y-point (end-segment h))))))
      (/ (+ w-len h-len) 2))))

;;make-segment start-segment end-segment
;;make-point x-point y-point
;;make-rect origin width height
;;test

(define or (make-point 1 1))
(define dlina (make-segment or (make-point 3 1)))
(define shirina (make-segment or (make-point 1 3)))
(define rect (make-rect or dlina shirina))
(area rect)
(perimeter rect)
