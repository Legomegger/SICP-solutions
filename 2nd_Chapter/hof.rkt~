#lang racket
(define (map proc list)
  (if (null? list)
      null
      (cons (proc (car list))
            (map proc (cdr list)))))

(define (filter predicate list)
  (cond ((null? list) null)
        ((predicate (car list)) (cons (car list) (filter predicate (cdr list))))
        (else (filter predicate (cdr list)))))

(define (accumulate op init sequence)
  (if (null? sequence)
      null
      (op (car sequence)
          (accumulate op init (cdr sequence)))))
