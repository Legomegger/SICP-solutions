#lang racket
(define (fold-right op init seq)
 (if (null? seq)
      init
     (op (car seq)
         (fold-right op init (cdr seq)))))
(define (fold-left op initial sequence)
 (define (iter result rest)
   (if (null? rest)
       result
       (iter (op result (car rest))
             (cdr rest))))
 (iter initial sequence))

(define (reverse sequence)
    (fold-right (lambda (x y) (append y (list x))) '() sequence))
(define (reversel sequence)
 (fold-left (lambda (x y) (cons y x)) '() sequence))

(display (cons '() 1))
(newline)
(display (reverse '(1 2 3 4)))
(newline)
(display (reversel '(1 2 3 4)))
(newline)
(display (fold-right / 1 (list 1 2 3.0)))
(newline)
(display (fold-left / 1 (list 1 2 3.0)))
(newline)
(display (fold-right list '() (list 1 2 3)))
(newline)
(display (fold-left list '() (list 1 2 3)))